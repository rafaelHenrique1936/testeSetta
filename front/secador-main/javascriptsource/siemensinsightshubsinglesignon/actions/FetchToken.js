// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";
import { encode, decode } from "base-64";

// BEGIN EXTRA CODE
function createTokenEntity(jsonData, token) {
		return new Promise(function (resolve, reject) {
			mx.data.create({
				entity: token,
				callback: function (mxObject) {
					// Dynamically set attributes
					mxObject.getAttributes()
						.forEach(function (attributeName) {
							var attributeValue = jsonData[attributeName];
							if (attributeValue) {
								mxObject.set(attributeName, attributeValue);
							}
						});
					resolve(mxObject);
				},
				error: function (error) {
					reject("Could not create object: " + error.message);
				}
			});
		});
	}
	
export async function fetchTokenFromMindSphere(token, client_id, client_secret, provider_tenant, gatewayURL, body) {
	const region_domain = gatewayURL.replace("https://gateway.","");
	const internal_app_name = client_id.replace('mobile-client-','').replace(`-${provider_tenant}`,'');	
	const credentials = encode(`${client_id}:${client_secret}`);
	
	const URL = `https://${provider_tenant}.piam.${region_domain}/oauth/token`;
	const options = {
		method: 'POST',
		headers: {
			Accept: 'application/json',
			'Content-Type': 'application/x-www-form-urlencoded',
			Authorization: `Basic ${credentials}`,
		},
		body: body.join('&')
	};	

	return fetch(URL, options)
		.then( async function (response) {
			if (!response.ok) {
				if (response.text) {
					const error = await response.text();
					if (error) {
						throw error;
					} else {
						if (response.status) {
							throw ('fetch failed with status: ' + response.status)
						} else {
							throw JSON.stringify(response);		
						}	
					}
				}
				throw response;
			}
			return response.json(); // Transform response to JSON 
		})
		.then(function (data) {		
			// Calc expiration timestamp for the access token 			
			data.access_token_expires_at = new Date(new Date().valueOf() + ( data.expires_in * 1000));	
			// Store refresh_token_expires_at from refresh_token
			const decodedRefreshToken = JSON.parse(decode(data.refresh_token.split('.')[1]));			
			data.refresh_token_expires_at = new Date(decodedRefreshToken.exp * 1000);
			data.tenant_name = decodedRefreshToken.ten;
			return createTokenEntity(data, token);
		})	
}
// END EXTRA CODE

/**
 * function to fetch a token from insights hub with given code
 * @param {string} code - code used to fetch a token from Insights Hub
 * @param {string} token
 * @param {string} client_id
 * @param {string} client_secret
 * @param {string} scheme
 * @param {string} provider_tenant
 * @param {string} gatewayURL
 * @returns {Promise.<MxObject>}
 */
export async function FetchToken(code, token, client_id, client_secret, scheme, provider_tenant, gatewayURL) {
	// BEGIN USER CODE
	if (!code) {
		return undefined;
	}	
	
	const region_domain = gatewayURL.replace("https://gateway.","");
	const internal_app_name = client_id.replace('mobile-client-','').replace(`-${provider_tenant}`,'');	
	
	const body = [
		`grant_type=authorization_code`,
		`redirect_uri=${scheme}://${provider_tenant}-${internal_app_name}-${provider_tenant}.${region_domain}/login`,
		`code=${code}`,
		`tenant=${provider_tenant}`,
	];
	return fetchTokenFromMindSphere(token, client_id, client_secret, provider_tenant, gatewayURL, body);
	// END USER CODE
}
