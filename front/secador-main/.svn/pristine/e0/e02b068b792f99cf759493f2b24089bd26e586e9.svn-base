// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import { Big } from "big.js";
import { fetchTokenFromMindSphere } from "./FetchToken.js"
import { setWindowAccessToken } from "./AddAuthHeaderToRequests.js"

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * @param {string} token
 * @param {string} client_id
 * @param {string} client_secret
 * @param {string} provider_tenant
 * @param {string} gatewayURL
 * @param {MxObject} mobileToken
 * @returns {Promise.<MxObject>}
 */
export async function RefreshToken(token, client_id, client_secret, provider_tenant, gatewayURL, mobileToken) {
	// BEGIN USER CODE
	if (mobileToken === undefined || mobileToken === null) {
		console.error("No mobileToken provided");
		return null;
	}

	const refresh_token_exp = mobileToken.get("refresh_token_expires_at");
	if (refresh_token_exp < new Date().valueOf()) {
		console.info("Refresh Token expired --> logout");
		// Do a hard logout as no communication with Mindsphere is possible any longer. User has to relogin.
		mx.logout();
		return mobileToken; // return the old token to prevent any retries during mx.logout is working, otherwise we run into an exception
	}	
	
	// Try to refresh the access token;
	const body = ['grant_type=refresh_token', `refresh_token=${mobileToken.get("refresh_token")}`];

	try {
		const newToken = await fetchTokenFromMindSphere(token, client_id, client_secret, provider_tenant, gatewayURL, body);
		if (newToken) {
			const tokenType = newToken.get('token_type');
			const access_token = newToken.get('access_token');
			setWindowAccessToken(`${tokenType} ${access_token}`);
		}	
		return newToken;
	} catch(err) {
		console.warn("Refreshing of token failed with error: ", err);
		return null;
	}
	
	// END USER CODE
}
