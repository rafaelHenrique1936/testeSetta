// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package siemensinsightshubsinglesignon.actions;

import java.util.stream.Collectors;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.core.CoreRuntimeException;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IUser;
import com.mendix.webui.CustomJavaAction;
import inh_org.jose4j.jwt.JwtClaims;
import inh_org.jose4j.jwt.MalformedClaimException;
import inh_org.jose4j.jwt.consumer.InvalidJwtException;
import siemensinsightshubsinglesignon.IPublicKeys;
import siemensinsightshubsinglesignon.NoJWTException;
import siemensinsightshubsinglesignon.PubKeyException;
import siemensinsightshubsinglesignon.ScopeRoleMappingException;
import siemensinsightshubsinglesignon.UserHandler;
import siemensinsightshubsinglesignon.Util;
import siemensinsightshubsinglesignon.VerifyJWT;
import siemensinsightshubsinglesignon.proxies.constants.Constants;
import siemensinsightshubsinglesignon.proxies.microflows.Microflows;

public class SingleSignOnMobile extends CustomJavaAction<java.lang.String>
{
	private java.lang.String AccessToken;

	public SingleSignOnMobile(IContext context, java.lang.String AccessToken)
	{
		super(context);
		this.AccessToken = AccessToken;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		SingleSignOnMobileHandler handler = new SingleSignOnMobileHandler();
		return handler.updateOrCreateUser(this.AccessToken, Constants.getCockpitApplicationName());
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "SingleSignOnMobile";
	}

	// BEGIN EXTRA CODE
	protected static ILogNode LOGGER = Core.getLogger(Constants.getModuleName());

	public class SingleSignOnMobileHandler implements IPublicKeys {
		private IPublicKeys iPublicKeysImpl;
		public SingleSignOnMobileHandler(IPublicKeys iPublicKeysImpl) {
			this.iPublicKeysImpl = iPublicKeysImpl;
		}
		public SingleSignOnMobileHandler() {
			this.iPublicKeysImpl = this;
		}
		public String updateOrCreateUser(String token, String AppName) throws InvalidJwtException, NoJWTException,
				ScopeRoleMappingException, PubKeyException, MalformedClaimException, CoreException, Exception {
			// Validate JWT and get claims
			// Get SudoContext for creating a new user
			try {
				IContext context = Core.createSystemContext();
				UserHandler userHandler = new UserHandler();
				VerifyJWT verifyJwt = new VerifyJWT(AppName, "trustedIssuer", (IPublicKeys) this.iPublicKeysImpl);
				JwtClaims claims = verifyJwt.getJWTClaimsNoIssuerCheck(token);
				
				// Get the user_id from JWT. The user_id is unique across all tenants
				String userId = claims.getStringClaimValue("user_id");
				String eMail = claims.getStringClaimValue("email");
				String tenant = claims.getStringClaimValue("ten");
	
				// Check if there is already a Session established for the given user
				IUser user = context.getSession().getUser(context);
				if (user != null && user.getName().equals(userId)) {
					userHandler.updateUserRoles(context, user, claims);
					return userId;
				}
	
				// Create user if not exist based on userId
				user = userHandler.getOrCreateUser(context, userId, eMail, tenant);
				userHandler.updateUserRoles(context, user, claims);
				
				return userId;
			} catch (CoreRuntimeException e) {
				LOGGER.error(e.getMessage(), e);
				Throwable rootCause = Util.getRootCause(e);
				LOGGER.error(rootCause.getMessage());
				if (rootCause.getClass().toString().contains("LicenseRuntimeException")) {		
					throw (Exception) rootCause;
				} else {
					throw e;
				}					
			}			
		}

		@Override
		public String getPublicKeys() {
			return Microflows.gET_PublicKeys(Core.createSystemContext());
		}
	}
	// END EXTRA CODE
}
